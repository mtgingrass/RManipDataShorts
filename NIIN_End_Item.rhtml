<html>

<head>
<title>Calculating Shorts wtih R</title>
</head>

<body style="background-color:#C5C6CC;">
<h1>R Tutorial on Real Data</h1>
<h2>Step by Step Guide for Analyzing Supply Chain Shorts</h2>
<p>This is an ongoing effort to teach using <b>R</b> as I progress with a real world project. Feel free to use, edit, and make corrections to this document. Hopefuly this will be a learning tool for future ORA's. </p>

<p>A database containing tables that show how many parts are serviceable at particular locations and how many parts are authorized at that location. Ideally, the number of serviceable shoud equal the number authorized. If the location has less than the number authroized, then they are short. </p>

<H1>Libraries</h1>
<p>Including essential libraries to help with data exploration and pipeline and plotting</p>

<!--begin.rcode
library(ggplot2)
library(RODBC)
end.rcode-->
<h1>Data Exploration and Cleanup</h1>

<!--begin.rcode

# Connect to Latest EXPRESS Depot DB from ShareDrive Site
# I could not connect using the \\tinker-2k.area52.afnoapps.usaf.mil\dfs1... path
# Change "X" to the drive letter mapped locally

accDB = "X:\\EXPRESS ShareDrive\\Current EXPRESS Depot Table\\Current EXPRESS Depot Tables.accdb"

mychan = odbcDriverConnect(paste0("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=", accDB))

# Query database
shorts_data = data.frame(sqlQuery(mychan, "select niin_id, sran, pos_serviceable, wrm_serviceable, pos_level, base_due_outs, hpmsk_stock from dbo_part_base"))


# View first 5 lines of data
head(shorts_data)

#How many rows/cols?
print (paste0("There are, ", dim(shorts_data)[1], " rows."))
print (paste0("There are, ", dim(shorts_data)[2], " columns"))

#Are there any NA's to worry about?
niin_to_ei_df = na.omit(shorts_data)
dim(shorts_data)

end.rcode-->

<p>Let's take a peak at the first 50 data points of <i>pos_serviceable</i> and <i>pos_level</i> with a quick plot.</p>

<!--begin.rcode fig.width=7, fig.height=6
plot(5,5, type ="n", axes = FALSE, ann = FALSE, xlim=c(0,50), ylim=c(0,10))
axis(1)
axis(2, las = 2)
mtext("NIIN Index", side = 1, line = 3)
mtext("Quantity", side = 2, line = 3)
title("POS Serviceable and POS Level")


x = shorts_data[,3]
y = shorts_data[,5]
points(x, pch=21, col="white", bg="black")
points(y, pch=21, col = "white", bg = "green")
points
end.rcode-->
<p> Two things to notice about this plot: First, there seems to be a lot of <i>0's</i> in the data. Second, Do you think some of the Green dots are overlapping the Black dots at those <i>0</i> points. <p>
<p>It turns out that if a <i>pos_level</i> is <b>0</b> then it can be pulled out of the data set. We only care about levels that are greater than 0. </p>

<p>Removing serviceable_level = 0 from data frame. 

<!--begin.rcode
shorts_data_pos = subset(shorts_data, shorts_data$pos_level > 0)
dim(shorts_data_pos)
end.rcode-->

<p>Plotting the new points without 0's. </p>

<!--begin.rcode
plot(5,5, type ="n", axes = FALSE, ann = FALSE, xlim=c(0,50), ylim=c(0,10))
axis(1)
axis(2, las = 2)
mtext("NIIN Index", side = 1, line = 3)
mtext("Quantity", side = 2, line = 3)
title("POS Serviceable and POS Level > 0")


x = shorts_data_pos[,3]
y = shorts_data_pos[,5]
points(x, pch=21, col="white", bg="black")
points(y, pch=21, col = "white", bg = "green")
end.rcode-->

<h1>Shorts</h1>
<h2>Total Shorts / Total Level</h2>
<p>Now that we removed the 0's, let's see how many shorts we have total as well as how many we are supposed to have.</p>
<p>When doing calculations with large datasets, it is best ot use a data table rather than a data frame. </p>

<!--begin.rcode
library(data.table)
library(plyr)

# Convert dataframe to data table
serviceable.dt = as.data.table(shorts_data_pos)

agg_serv = serviceable.dt[, sum(serviceable.dt$pos_serviceable)]
agg_serv_lev = serviceable.dt[, sum(serviceable.dt$pos_level)]


# what is the perecent serviceable / level for pos?
RO_agg = agg_serv/agg_serv_lev
RO_agg


count_sran = count(serviceable.dt, c("sran"))
print (paste0("The number of sran's: ", dim(count_sran)[1]))


# serviceable by sran
serv_by_sran = aggregate(serviceable.dt$pos_serviceable ~ serviceable.dt$sran, sum, data = serviceable.dt)
level_by_sran = aggregate(serviceable.dt$pos_level ~ serviceable.dt$sran, data = serviceable.dt, sum)

ro_percent_sran = as.data.table(count_sran$sran)
ro_percent_sran$ro_percent = serv_by_sran[2]/level_by_sran[2]
colnames(ro_percent_sran)[1]="SRAN"

#How many SRANs have shorts?
srans_w_shorts = subset(ro_percent_sran, ro_percent_sran$ro_percent < 1)
srans_w_excess = subset(ro_percent_sran, ro_percent_sran$ro_percent > 1)

print (paste0("Number of SRANS that are short: ", dim(srans_w_shorts)[1]))
print (paste0("Number of SRANS that are misaligned: ", dim(srans_w_excess)[1]))

# Let's narrow the focus areas down to srans with under 60% RO only
srans_under60 = subset(ro_percent_sran, ro_percent_sran$ro_percent < .6)

print (paste0("Number of SRANS under 60% RO Fill is: ", dim(srans_under60)[1]))
asset_avail_overall = 1- dim(srans_under60)[1]/dim(ro_percent_sran)[1]

print (paste0("Overall AAv = ", asset_avail_overall))

end.rcode-->

</body>
</html>
